{
  "noir_version": "1.0.0-beta.1+03b58fa2dfcc8acc8cf5198b1b23b55676fbdb02",
  "hash": 11507889381899045919,
  "abi": {
    "parameters": [
      {
        "name": "dg1",
        "type": {
          "kind": "array",
          "length": 95,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "sk_identity",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "tuple",
        "fields": [
          {
            "kind": "field"
          },
          {
            "kind": "field"
          },
          {
            "kind": "field"
          }
        ]
      },
      "visibility": "public"
    },
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "3340509063311594244": {
        "error_kind": "string",
        "string": "byte to bits conversion"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "14514982005979867414": {
        "error_kind": "string",
        "string": "attempt to bit-shift with overflow"
      },
      "16761564377371454734": {
        "error_kind": "string",
        "string": "Array index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "",
  "debug_symbols": "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",
  "file_map": {
    "6": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: StructDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: StructDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "19": {
      "source": "pub mod bn254;\nuse crate::runtime::is_unconstrained;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        assert(BIT_SIZE < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        unsafe {\n            //@safety : unconstrained context\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n",
      "path": "std/field/mod.nr"
    },
    "23": {
      "source": "// Instantiations of Poseidon permutation for the prime field of the same order as BN254\nuse crate::hash::poseidon::bn254::consts;\nuse crate::hash::poseidon::permute;\n\n#[field(bn254)]\npub fn x5_2(mut state: [Field; 2]) -> [Field; 2] {\n    state = permute(consts::x5_2_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_3(mut state: [Field; 3]) -> [Field; 3] {\n    state = permute(consts::x5_3_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_4(mut state: [Field; 4]) -> [Field; 4] {\n    state = permute(consts::x5_4_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_5(mut state: [Field; 5]) -> [Field; 5] {\n    state = permute(consts::x5_5_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_6(mut state: [Field; 6]) -> [Field; 6] {\n    state = permute(consts::x5_6_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_7(mut state: [Field; 7]) -> [Field; 7] {\n    state = permute(consts::x5_7_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_8(mut state: [Field; 8]) -> [Field; 8] {\n    state = permute(consts::x5_8_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_9(mut state: [Field; 9]) -> [Field; 9] {\n    state = permute(consts::x5_9_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_10(mut state: [Field; 10]) -> [Field; 10] {\n    state = permute(consts::x5_10_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_11(mut state: [Field; 11]) -> [Field; 11] {\n    state = permute(consts::x5_11_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_12(mut state: [Field; 12]) -> [Field; 12] {\n    state = permute(consts::x5_12_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_13(mut state: [Field; 13]) -> [Field; 13] {\n    state = permute(consts::x5_13_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_14(mut state: [Field; 14]) -> [Field; 14] {\n    state = permute(consts::x5_14_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_15(mut state: [Field; 15]) -> [Field; 15] {\n    state = permute(consts::x5_15_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_16(mut state: [Field; 16]) -> [Field; 16] {\n    state = permute(consts::x5_16_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_17(mut state: [Field; 17]) -> [Field; 17] {\n    state = permute(consts::x5_17_config(), state);\n\n    state\n}\n",
      "path": "std/hash/poseidon/bn254/perm.nr"
    },
    "24": {
      "source": "// Instantiations of Poseidon constants, permutations and sponge for prime field of the same order as BN254\npub mod perm;\npub mod consts;\n\nuse crate::hash::poseidon::absorb;\n\n// Variable-length Poseidon-128 sponge as suggested in second bullet point of section 3 of https://eprint.iacr.org/2019/458.pdf\n#[field(bn254)]\npub fn sponge<let N: u32>(msg: [Field; N]) -> Field {\n    absorb(consts::x5_5_config(), [0; 5], 4, 1, msg)[1]\n}\n\n// Various instances of the Poseidon hash function\n// Consistent with Circom's implementation\n#[no_predicates]\npub fn hash_1(input: [Field; 1]) -> Field {\n    let mut state = [0; 2];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_2(state)[0]\n}\n\n#[no_predicates]\npub fn hash_2(input: [Field; 2]) -> Field {\n    let mut state = [0; 3];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_3(state)[0]\n}\n\n#[no_predicates]\npub fn hash_3(input: [Field; 3]) -> Field {\n    let mut state = [0; 4];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_4(state)[0]\n}\n\n#[no_predicates]\npub fn hash_4(input: [Field; 4]) -> Field {\n    let mut state = [0; 5];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_5(state)[0]\n}\n\n#[no_predicates]\npub fn hash_5(input: [Field; 5]) -> Field {\n    let mut state = [0; 6];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_6(state)[0]\n}\n\n#[no_predicates]\npub fn hash_6(input: [Field; 6]) -> Field {\n    let mut state = [0; 7];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_7(state)[0]\n}\n\n#[no_predicates]\npub fn hash_7(input: [Field; 7]) -> Field {\n    let mut state = [0; 8];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_8(state)[0]\n}\n\n#[no_predicates]\npub fn hash_8(input: [Field; 8]) -> Field {\n    let mut state = [0; 9];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_9(state)[0]\n}\n\n#[no_predicates]\npub fn hash_9(input: [Field; 9]) -> Field {\n    let mut state = [0; 10];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_10(state)[0]\n}\n\n#[no_predicates]\npub fn hash_10(input: [Field; 10]) -> Field {\n    let mut state = [0; 11];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_11(state)[0]\n}\n\n#[no_predicates]\npub fn hash_11(input: [Field; 11]) -> Field {\n    let mut state = [0; 12];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_12(state)[0]\n}\n\n#[no_predicates]\npub fn hash_12(input: [Field; 12]) -> Field {\n    let mut state = [0; 13];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_13(state)[0]\n}\n\n#[no_predicates]\npub fn hash_13(input: [Field; 13]) -> Field {\n    let mut state = [0; 14];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_14(state)[0]\n}\n\n#[no_predicates]\npub fn hash_14(input: [Field; 14]) -> Field {\n    let mut state = [0; 15];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_15(state)[0]\n}\n\n#[no_predicates]\npub fn hash_15(input: [Field; 15]) -> Field {\n    let mut state = [0; 16];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_16(state)[0]\n}\n\n#[no_predicates]\npub fn hash_16(input: [Field; 16]) -> Field {\n    let mut state = [0; 17];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_17(state)[0]\n}\n",
      "path": "std/hash/poseidon/bn254.nr"
    },
    "25": {
      "source": "pub mod bn254; // Instantiations of Poseidon for prime field of the same order as BN254\nuse crate::default::Default;\nuse crate::hash::Hasher;\n\n// A config struct defining the parameters of the Poseidon instance to use.\n//\n// A thorough writeup of this method (along with an unoptimized method) can be found at: https://spec.filecoin.io/algorithms/crypto/poseidon/\npub struct PoseidonConfig<let T: u32, let N: u32, let X: u32> {\n    // State width, should be equal to `T`\n    t: Field,\n    // Number of full rounds. should be even\n    rf: u8,\n    // Number of partial rounds\n    rp: u8,\n    // S-box power; depends on the underlying field\n    alpha: Field,\n    // The round constants for the\n    round_constants: [Field; N],\n    // The MDS matrix for the Poseidon instance\n    mds: [[Field; T]; T],\n    // An MDS matrix which also applies a basis transformation which allows\n    // sparse matrices to be used for the partial rounds.\n    //\n    // This should be applied instead of `mds` in the final full round.\n    presparse_mds: [[Field; T]; T],\n    // A set of sparse matrices used for MDS mixing for the partial rounds.\n    sparse_mds: [Field; X],\n}\n\npub fn config<let T: u32, let N: u32, let X: u32>(\n    t: Field,\n    rf: u8,\n    rp: u8,\n    alpha: Field,\n    round_constants: [Field; N],\n    mds: [[Field; T]; T],\n    presparse_mds: [[Field; T]; T],\n    sparse_mds: [Field; X],\n) -> PoseidonConfig<T, N, X> {\n    // Input checks\n    assert_eq(rf & 1, 0);\n    assert_eq((t as u8) * rf + rp, N as u8);\n    assert_eq(t, T as Field);\n    assert(alpha != 0);\n\n    PoseidonConfig { t, rf, rp, alpha, round_constants, mds, presparse_mds, sparse_mds }\n}\n\npub fn permute<let T: u32, let N: u32, let X: u32>(\n    pos_conf: PoseidonConfig<T, N, X>,\n    mut state: [Field; T],\n) -> [Field; T] {\n    let PoseidonConfig { t, rf, rp, alpha, round_constants, mds, presparse_mds, sparse_mds } =\n        pos_conf;\n\n    for i in 0..state.len() {\n        state[i] += round_constants[i];\n    }\n\n    for _r in 0..rf / 2 - 1 {\n        state = sigma(state);\n        for i in 0..T {\n            state[i] += round_constants[T * (_r + 1) as u32 + i];\n        }\n        state = apply_matrix(mds, state);\n    }\n\n    state = sigma(state);\n    for i in 0..T {\n        state[i] += round_constants[T * (rf / 2) as u32 + i];\n    }\n    state = apply_matrix(presparse_mds, state);\n\n    for i in 0..T {\n        crate::as_witness(state[i]);\n    }\n\n    for _r in 0..rp {\n        state[0] = state[0].pow_32(alpha);\n        state[0] += round_constants[(rf / 2 + 1) as u32 * T + _r as u32];\n        crate::as_witness(state[0]);\n        {\n            let mut newState0 = 0;\n            for j in 0..T {\n                newState0 += sparse_mds[(T * 2 - 1) * _r as u32 + j as u32] * state[j];\n            }\n            for k in 1..T {\n                state[k] += state[0] * sparse_mds[(t * 2 - 1) as u32 * _r as u32 + T + k - 1];\n            }\n            state[0] = newState0;\n\n            if (_r & 1 == 0) {\n                for k in 1..T {\n                    crate::as_witness(state[k]);\n                }\n            }\n        }\n    }\n\n    for _r in 0..rf / 2 - 1 {\n        state = sigma(state);\n        for i in 0..state.len() {\n            state[i] += round_constants[(rf / 2 + 1) as u32 * T + rp as u32 + (_r as u32) * T + i];\n        }\n        state = apply_matrix(mds, state);\n    }\n\n    state = sigma(state);\n    state = apply_matrix(mds, state);\n\n    state\n}\n\n// Performs matrix multiplication on a vector\nfn apply_matrix<let N: u32>(matrix: [[Field; N]; N], vec: [Field; N]) -> [Field; N] {\n    let mut out = [0; N];\n\n    for i in 0..N {\n        for j in 0..N {\n            out[i] += vec[j] * matrix[j][i];\n        }\n    }\n\n    out\n}\n\n// Corresponding absorption.\nfn absorb<let T: u32, let N: u32, let X: u32, let O: u32>(\n    pos_conf: PoseidonConfig<T, N, X>,\n    // Initial state; usually [0; O]\n    mut state: [Field; T],\n    rate: Field,\n    capacity: Field,\n    msg: [Field; O], // Arbitrary length message\n) -> [Field; T] {\n    assert_eq(pos_conf.t, rate + capacity);\n\n    let mut i = 0;\n\n    for k in 0..msg.len() {\n        // Add current block to state\n        state[capacity + i] += msg[k];\n        i = i + 1;\n        // Enough to absorb\n        if i == rate {\n            state = permute(pos_conf, state);\n            i = 0;\n        }\n    }\n    // If we have one more block to permute\n    if i != 0 {\n        state = permute(pos_conf, state);\n    }\n\n    state\n}\n\nfn sigma<let O: u32>(x: [Field; O]) -> [Field; O] {\n    let mut y = x;\n    for i in 0..O {\n        let t = y[i];\n        let tt = t * t;\n        let tttt = tt * tt;\n        y[i] *= tttt;\n    }\n    y\n}\n\npub struct PoseidonHasher {\n    _state: [Field],\n}\n\nimpl Hasher for PoseidonHasher {\n    #[field(bn254)]\n    fn finish(self) -> Field {\n        let mut result = 0;\n        let len = self._state.len();\n        assert(len < 16);\n        if len == 1 {\n            result = bn254::hash_1([self._state[0]]);\n        }\n        if len == 2 {\n            result = bn254::hash_2([self._state[0], self._state[1]]);\n        }\n        if len == 3 {\n            result = bn254::hash_3([self._state[0], self._state[1], self._state[2]]);\n        }\n        if len == 4 {\n            result = bn254::hash_4([self._state[0], self._state[1], self._state[2], self._state[3]]);\n        }\n        if len == 5 {\n            result = bn254::hash_5([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n            ]);\n        }\n        if len == 6 {\n            result = bn254::hash_6([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n            ]);\n        }\n        if len == 7 {\n            result = bn254::hash_7([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n            ]);\n        }\n        if len == 8 {\n            result = bn254::hash_8([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n            ]);\n        }\n        if len == 9 {\n            result = bn254::hash_9([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n            ]);\n        }\n        if len == 10 {\n            result = bn254::hash_10([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n                self._state[9],\n            ]);\n        }\n        if len == 11 {\n            result = bn254::hash_11([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n                self._state[9],\n                self._state[10],\n            ]);\n        }\n        if len == 12 {\n            result = bn254::hash_12([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n                self._state[9],\n                self._state[10],\n                self._state[11],\n            ]);\n        }\n        if len == 13 {\n            result = bn254::hash_13([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n                self._state[9],\n                self._state[10],\n                self._state[11],\n                self._state[12],\n            ]);\n        }\n        if len == 14 {\n            result = bn254::hash_14([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n                self._state[9],\n                self._state[10],\n                self._state[11],\n                self._state[12],\n                self._state[13],\n            ]);\n        }\n        if len == 15 {\n            result = bn254::hash_15([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n                self._state[9],\n                self._state[10],\n                self._state[11],\n                self._state[12],\n                self._state[13],\n                self._state[14],\n            ]);\n        }\n\n        result\n    }\n\n    #[inline_always]\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for PoseidonHasher {\n    fn default() -> Self {\n        PoseidonHasher { _state: &[] }\n    }\n}\n\nmod poseidon_tests {\n    use crate::hash::poseidon;\n\n    #[test]\n    fn reference_impl_test_vectors() {\n        // hardcoded test vectors from https://extgit.iaik.tugraz.at/krypto/hadeshash/-/blob/master/code/test_vectors.txt\n        {\n            let mut state = [0, 1, 2];\n            let mut expected = [\n                0x115cc0f5e7d690413df64c6b9662e9cf2a3617f2743245519e19607a4417189a,\n                0x0fca49b798923ab0239de1c9e7a4a9a2210312b6a2f616d18b5a87f9b628ae29,\n                0x0e7ae82e40091e63cbd4f16a6d16310b3729d4b6e138fcf54110e2867045a30c,\n            ];\n            assert_eq(\n                expected,\n                poseidon::bn254::perm::x5_3(state),\n                \"Failed to reproduce output for [0, 1, 2]\",\n            );\n        }\n        {\n            let mut state = [0, 1, 2, 3, 4];\n            let mut expected = [\n                0x299c867db6c1fdd79dcefa40e4510b9837e60ebb1ce0663dbaa525df65250465,\n                0x1148aaef609aa338b27dafd89bb98862d8bb2b429aceac47d86206154ffe053d,\n                0x24febb87fed7462e23f6665ff9a0111f4044c38ee1672c1ac6b0637d34f24907,\n                0x0eb08f6d809668a981c186beaf6110060707059576406b248e5d9cf6e78b3d3e,\n                0x07748bc6877c9b82c8b98666ee9d0626ec7f5be4205f79ee8528ef1c4a376fc7,\n            ];\n            assert_eq(\n                expected,\n                poseidon::bn254::perm::x5_5(state),\n                \"Failed to reproduce output for [0, 1, 2, 3, 4]\",\n            );\n        }\n    }\n}\n",
      "path": "std/hash/poseidon/mod.nr"
    },
    "27": {
      "source": "use crate::runtime::is_unconstrained;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// A message block is up to 64 bytes taken from the input.\nglobal BLOCK_SIZE: u32 = 64;\n\n// The first index in the block where the 8 byte message size will be written.\nglobal MSG_SIZE_PTR: u32 = 56;\n\n// Size of the message block when packed as 4-byte integer array.\nglobal INT_BLOCK_SIZE: u32 = 16;\n\n// A `u32` integer consists of 4 bytes.\nglobal INT_SIZE: u32 = 4;\n\n// Index of the integer in the `INT_BLOCK` where the length is written.\nglobal INT_SIZE_PTR: u32 = MSG_SIZE_PTR / INT_SIZE;\n\n// Magic numbers for bit shifting.\n// Works with actual bit shifting as well as the compiler turns them into * and /\n// but circuit execution appears to be 10% faster this way.\nglobal TWO_POW_8: u32 = 256;\nglobal TWO_POW_16: u32 = TWO_POW_8 * 256;\nglobal TWO_POW_24: u32 = TWO_POW_16 * 256;\nglobal TWO_POW_32: u64 = TWO_POW_24 as u64 * 256;\n\n// Index of a byte in a 64 byte block; ie. 0..=63\ntype BLOCK_BYTE_PTR = u32;\n\n// The foreign function to compress blocks works on 16 pieces of 4-byte integers, instead of 64 bytes.\ntype INT_BLOCK = [u32; INT_BLOCK_SIZE];\n\n// A message block is a slice of the original message of a fixed size,\n// potentially padded with zeros, with neighbouring 4 bytes packed into integers.\ntype MSG_BLOCK = INT_BLOCK;\n\n// The hash is 32 bytes.\ntype HASH = [u8; 32];\n\n// The state accumulates the blocks.\n// Its overall size is the same as the `HASH`.\ntype STATE = [u32; 8];\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: INT_BLOCK, _state: STATE) -> STATE {}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    let num_blocks = N / BLOCK_SIZE;\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = [\n        1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635,\n        1541459225,\n    ];\n    // Pointer into msg_block on a 64 byte scale\n    let mut msg_byte_ptr = 0;\n    for i in 0..num_blocks {\n        let msg_start = BLOCK_SIZE * i;\n        let (new_msg_block, new_msg_byte_ptr) = unsafe {\n            /*@safety  : the msg_block is checked below in verify_msg_block*/\n            build_msg_block(msg, message_size, msg_start)\n        };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n\n        // If the block is filled, compress it.\n        // An un-filled block is handled after this loop.\n        if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n            h = sha256_compression(msg_block, h);\n        }\n    }\n\n    let modulo = N % BLOCK_SIZE;\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = unsafe {\n            //@safety : the msg_block is checked below in verify_msg_block\n            build_msg_block(msg, message_size, msg_start)\n        };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    // If we had modulo == 0 then it means the last block was full,\n    // and we can reset the pointer to zero to overwrite it.\n    if msg_byte_ptr == BLOCK_SIZE {\n        msg_byte_ptr = 0;\n    }\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    msg_block = update_block_item(\n        msg_block,\n        msg_byte_ptr,\n        |msg_item| set_item_byte_then_zeros(msg_item, msg_byte_ptr, 1 << 7),\n    );\n    msg_byte_ptr = msg_byte_ptr + 1;\n    let last_block = msg_block;\n\n    // If we don't have room to write the size, compress the block and reset it.\n    if msg_byte_ptr > MSG_SIZE_PTR {\n        h = sha256_compression(msg_block, h);\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        msg_byte_ptr = 0;\n    }\n\n    msg_block = unsafe {\n        //@safety : the msg_len is checked below in verify_msg_len\n        attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size)\n    };\n\n    if !is_unconstrained() {\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n    }\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if msg_start + BLOCK_SIZE > message_size {\n        if message_size < msg_start {\n            // This function is sometimes called with `msg_start` past the end of the message.\n            // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n            0\n        } else {\n            message_size - msg_start\n        }\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Apply a function on the block item which the pointer indicates.\nfn update_block_item<Env>(\n    mut msg_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    f: fn[Env](u32) -> u32,\n) -> MSG_BLOCK {\n    let i = msg_byte_ptr / INT_SIZE;\n    msg_block[i] = f(msg_block[i]);\n    msg_block\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        if item == 0 {\n            0\n        } else {\n            // Brillig wouldn't shift 0<<4 without overflow.\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod tests {\n    use super::{\n        attach_len_to_msg_block, build_msg_block, byte_into_item, get_item_byte, make_item,\n        set_item_byte_then_zeros, set_item_zeros,\n    };\n    use super::INT_BLOCK;\n    use super::sha256_var;\n\n    #[test]\n    fn smoke_test() {\n        let input = [0xbd];\n        let result = [\n            0x68, 0x32, 0x57, 0x20, 0xaa, 0xbd, 0x7c, 0x82, 0xf3, 0x0f, 0x55, 0x4b, 0x31, 0x3d,\n            0x05, 0x70, 0xc9, 0x5a, 0xcc, 0xbb, 0x7d, 0xc4, 0xb5, 0xaa, 0xe1, 0x12, 0x04, 0xc0,\n            0x8f, 0xfe, 0x73, 0x2b,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116,\n        ];\n        let result = [\n            91, 122, 146, 93, 52, 109, 133, 148, 171, 61, 156, 70, 189, 238, 153, 7, 222, 184, 94,\n            24, 65, 114, 192, 244, 207, 199, 87, 232, 192, 224, 171, 207,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_multiple_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115,\n            99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49,\n            46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46,\n            48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115,\n            117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97,\n            103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45,\n            52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55,\n            64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32,\n            50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32,\n            43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64,\n            103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103,\n            110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115,\n            104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101,\n            108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109,\n            59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56,\n            51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48,\n            87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75,\n            57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67,\n            111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101,\n            114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99,\n        ];\n        let result = [\n            116, 90, 151, 31, 78, 22, 138, 180, 211, 189, 69, 76, 227, 200, 155, 29, 59, 123, 154,\n            60, 47, 153, 203, 129, 157, 251, 48, 2, 79, 11, 65, 47,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_under_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59,\n        ];\n        let result = [\n            143, 140, 76, 173, 222, 123, 102, 68, 70, 149, 207, 43, 39, 61, 34, 79, 216, 252, 213,\n            165, 74, 16, 110, 74, 29, 64, 138, 167, 30, 1, 9, 119,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_not_block_multiple() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115,\n            99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49,\n            46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46,\n            48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115,\n            117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97,\n            103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45,\n            52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55,\n            64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32,\n            50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32,\n            43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64,\n            103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103,\n            110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115,\n            104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101,\n            108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109,\n            59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56,\n            51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48,\n            87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75,\n            57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67,\n            111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101,\n            114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99, 116, 58, 77, 101, 115, 115, 97,\n            103, 101, 45, 73, 100, 58, 68, 97, 116, 101, 58, 116, 111, 59, 32, 98, 61,\n        ];\n        let result = [\n            112, 144, 73, 182, 208, 98, 9, 238, 54, 229, 61, 145, 222, 17, 72, 62, 148, 222, 186,\n            55, 192, 82, 220, 35, 66, 47, 193, 200, 22, 38, 26, 186,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_with_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17,\n            48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12,\n            201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48,\n            37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6,\n            242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2,\n            1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89,\n            110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2,\n            1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75,\n            193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1,\n            12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189,\n            233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4,\n            32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45,\n            105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4,\n            32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188,\n            194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212,\n            181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53,\n        ];\n        let message_size = 297;\n        assert_eq(sha256_var(input, message_size), result);\n    }\n\n    #[test]\n    fn msg_big_no_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17,\n            48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12,\n            201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48,\n            37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6,\n            242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2,\n            1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89,\n            110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2,\n            1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75,\n            193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1,\n            12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189,\n            233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4,\n            32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45,\n            105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4,\n            32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188,\n            194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38,\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212,\n            181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn same_msg_len_variable_padding() {\n        let input = [\n            29, 81, 165, 84, 243, 114, 101, 37, 242, 146, 127, 99, 69, 145, 39, 72, 213, 39, 253,\n            179, 218, 37, 217, 201, 172, 93, 198, 50, 249, 70, 15, 30, 162, 112, 187, 40, 140, 9,\n            236, 53, 32, 44, 38, 163, 113, 254, 192, 197, 44, 89, 71, 130, 169, 242, 17, 211, 214,\n            72, 19, 178, 186, 168, 147, 127, 99, 101, 252, 227, 8, 147, 150, 85, 97, 158, 17, 107,\n            218, 244, 82, 113, 247, 91, 208, 214, 60, 244, 87, 137, 173, 201, 130, 18, 66, 56, 198,\n            149, 207, 189, 175, 120, 123, 224, 177, 167, 251, 159, 143, 110, 68, 183, 189, 70, 126,\n            32, 35, 164, 44, 30, 44, 12, 65, 18, 62, 239, 242, 2, 248, 104, 2, 178, 64, 28, 126, 36,\n            137, 24, 14, 116, 91, 98, 90, 159, 218, 102, 45, 11, 110, 223, 245, 184, 52, 99, 59,\n            245, 136, 175, 3, 72, 164, 146, 145, 116, 22, 66, 24, 49, 193, 121, 3, 60, 37, 41, 97,\n            3, 190, 66, 195, 225, 63, 46, 3, 118, 4, 208, 15, 1, 40, 254, 235, 151, 123, 70, 180,\n            170, 44, 172, 90, 4, 254, 53, 239, 116, 246, 67, 56, 129, 61, 22, 169, 213, 65, 27, 216,\n            116, 162, 239, 214, 207, 126, 177, 20, 100, 25, 48, 143, 84, 215, 70, 197, 53, 65, 70,\n            86, 172, 61, 62, 9, 212, 167, 169, 133, 41, 126, 213, 196, 33, 192, 238, 0, 63, 246,\n            215, 58, 128, 110, 101, 92, 3, 170, 214, 130, 149, 52, 81, 125, 118, 233, 3, 118, 193,\n            104, 207, 120, 115, 77, 253, 191, 122, 0, 107, 164, 207, 113, 81, 169, 36, 201, 228, 74,\n            134, 131, 218, 178, 35, 30, 216, 101, 2, 103, 174, 87, 95, 50, 50, 215, 157, 5, 210,\n            188, 54, 211, 78, 45, 199, 96, 121, 241, 241, 176, 226, 194, 134, 130, 89, 217, 210,\n            186, 32, 140, 39, 91, 103, 212, 26, 87, 32, 72, 144, 228, 230, 117, 99, 188, 50, 15, 69,\n            79, 179, 50, 12, 106, 86, 218, 101, 73, 142, 243, 29, 250, 122, 228, 233, 29, 255, 22,\n            121, 114, 125, 103, 41, 250, 241, 179, 126, 158, 198, 116, 209, 65, 94, 98, 228, 175,\n            169, 96, 3, 9, 233, 133, 214, 55, 161, 164, 103, 80, 85, 24, 186, 64, 167, 92, 131, 53,\n            101, 202, 47, 25, 104, 118, 155, 14, 12, 12, 25, 116, 45, 221, 249, 28, 246, 212, 200,\n            157, 167, 169, 56, 197, 181, 4, 245, 146, 1, 140, 234, 191, 212, 228, 125, 87, 81, 86,\n            119, 30, 63, 129, 143, 32, 96,\n        ];\n\n        // Prepare inputs of different lengths\n        let mut input_511 = [0; 511];\n        let mut input_512 = [0; 512]; // Next block\n        let mut input_575 = [0; 575];\n        let mut input_576 = [0; 576]; // Next block\n        for i in 0..input.len() {\n            input_511[i] = input[i];\n            input_512[i] = input[i];\n            input_575[i] = input[i];\n            input_576[i] = input[i];\n        }\n\n        // Compute hashes of all inputs (with same message length)\n        let fixed_length_hash = super::sha256(input);\n        let var_full_length_hash = sha256_var(input, input.len() as u64);\n        let var_length_hash_511 = sha256_var(input_511, input.len() as u64);\n        let var_length_hash_512 = sha256_var(input_512, input.len() as u64);\n        let var_length_hash_575 = sha256_var(input_575, input.len() as u64);\n        let var_length_hash_576 = sha256_var(input_576, input.len() as u64);\n\n        // All of the above should have produced the same hash\n        assert_eq(var_full_length_hash, fixed_length_hash);\n        assert_eq(var_length_hash_511, fixed_length_hash);\n        assert_eq(var_length_hash_512, fixed_length_hash);\n        assert_eq(var_length_hash_575, fixed_length_hash);\n        assert_eq(var_length_hash_576, fixed_length_hash);\n    }\n\n    #[test]\n    fn test_get_item_byte() {\n        let fld = make_item(10, 20, 30, 40);\n        assert_eq(fld, 0x0a141e28);\n        assert_eq(get_item_byte(fld, 0), 10);\n        assert_eq(get_item_byte(fld, 4), 10);\n        assert_eq(get_item_byte(fld, 6), 30);\n    }\n\n    #[test]\n    fn test_byte_into_item() {\n        let fld = make_item(0, 20, 0, 0);\n        assert_eq(byte_into_item(20, 1), fld);\n        assert_eq(byte_into_item(20, 5), fld);\n    }\n\n    #[test]\n    fn test_set_item_zeros() {\n        let fld0 = make_item(10, 20, 30, 40);\n        let fld1 = make_item(10, 0, 0, 0);\n        assert_eq(set_item_zeros(fld0, 3), fld1);\n        assert_eq(set_item_zeros(fld0, 4), 0);\n        assert_eq(set_item_zeros(0, 4), 0);\n    }\n\n    #[test]\n    fn test_set_item_byte_then_zeros() {\n        let fld0 = make_item(10, 20, 30, 40);\n        let fld1 = make_item(10, 50, 0, 0);\n        assert_eq(set_item_byte_then_zeros(fld0, 1, 50), fld1);\n    }\n\n    #[test]\n    fn test_build_msg_block_start_0() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48,\n        ];\n        assert_eq(input.len(), 22);\n        let (msg_block, msg_byte_ptr) = unsafe {\n            //@safety : testing context\n            build_msg_block(input, input.len(), 0)\n        };\n        assert_eq(msg_byte_ptr, input.len());\n        assert_eq(msg_block[0], make_item(input[0], input[1], input[2], input[3]));\n        assert_eq(msg_block[1], make_item(input[4], input[5], input[6], input[7]));\n        assert_eq(msg_block[5], make_item(input[20], input[21], 0, 0));\n        assert_eq(msg_block[6], 0);\n    }\n\n    #[test]\n    fn test_build_msg_block_start_1() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116,\n        ];\n        assert_eq(input.len(), 68);\n        let (msg_block, msg_byte_ptr) = unsafe {\n            //@safety : testing context\n            build_msg_block(input, input.len(), 64)\n        };\n        assert_eq(msg_byte_ptr, 4);\n        assert_eq(msg_block[0], make_item(input[64], input[65], input[66], input[67]));\n        assert_eq(msg_block[1], 0);\n    }\n\n    #[test]\n    fn test_attach_len_to_msg_block() {\n        let input: INT_BLOCK = [\n            2152555847, 1397309779, 1936618851, 1262052426, 1936876331, 1985297723, 543702374,\n            1919905082, 1131376244, 1701737517, 1417244773, 978151789, 1697470053, 1920166255,\n            1849316213, 1651139939,\n        ];\n        let msg_block = unsafe {\n            //@safety  : testing context\n            attach_len_to_msg_block(input, 1, 448)\n        };\n        assert_eq(msg_block[0], ((1 << 7) as u32) * 256 * 256 * 256);\n        assert_eq(msg_block[1], 0);\n        assert_eq(msg_block[15], 3584);\n    }\n}\n",
      "path": "std/hash/sha256.nr"
    },
    "55": {
      "source": "// This file is kept for backwards compatibility.\n#[deprecated]\npub fn digest<let N: u32>(msg: [u8; N]) -> [u8; 32] {\n    crate::hash::sha256::digest(msg)\n}\n\n#[deprecated]\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> [u8; 32] {\n    crate::hash::sha256::sha256_var(msg, message_size)\n}\n",
      "path": "std/sha256.nr"
    },
    "94": {
      "source": "pub fn priv_to_pub(priv: Field) -> (Field, Field){\n    let base_x = 5299619240641551281634865583518297030282874472190772894086521144482721001553;\n    let base_y = 16950150798460657717958625567821834550301663161624707787222815936182638968203;\n\n    let priv_bits: [u1; 254] = priv.to_be_bits::<254>();\n\n    let mut result_x = base_x * (priv_bits[0] as Field);\n    let mut result_y = base_y * (priv_bits[0] as Field);\n\n    for i in 1..254{\n        let tmp_double = add_zero(result_x, result_y, result_x, result_y);\n\n        let tmp_add = add_zero(tmp_double.0, tmp_double.1, base_x * (priv_bits[i] as Field), base_y * (priv_bits[i] as Field));\n\n        result_x = tmp_add.0;\n        result_y = tmp_add.1;\n\n    }\n\n\n    (result_x, result_y)\n\n}\n\npub fn add (x1: Field, y1: Field, x2: Field, y2: Field) -> (Field, Field){\n    \n    let a = 168700;\n    let d = 168696;\n    \n    let beta = x1 * y2;\n\n    let gamma = x2 * y1;\n\n    let delta = (y1 - x1 * a) * (x2 + y2);\n\n    let tau = beta * gamma;\n    \n    let x = (beta + gamma) / (1 + d * tau);\n    \n    let y = (delta + a * beta - gamma) / (1 - d * tau);\n\n    (x,y)\n}\n\npub fn add_zero(x1: Field, y1: Field, x2: Field, y2: Field) -> (Field, Field){\n    \n    let a = 168700;\n    let d = 168696;\n    \n    let beta = x1 * y2;\n\n    let gamma = x2 * y1;\n\n    let delta = (y1 - x1 * a) * (x2 + y2);\n\n    let tau = beta * gamma;\n    \n    let x = (beta + gamma) / (1 + d * tau);\n    \n    let y = (delta + a * beta - gamma) / (1 - d * tau);\n\n    let is_zero_x = x.eq(0) as Field;\n    let is_zero_y = y.eq(0) as Field;\n    (x + is_zero_x * (x1 + x2), y + is_zero_y * (y1 + y2))\n}\n\n#[test]\nfn test_add(){\n    println(add(\n    5299619240641551281634865583518297030282874472190772894086521144482721001553,\n    16950150798460657717958625567821834550301663161624707787222815936182638968203,\n    5299619240641551281634865583518297030282874472190772894086521144482721001553,\n    16950150798460657717958625567821834550301663161624707787222815936182638968203,\n    ));\n    println(add(\n    0,\n    0,\n    5299619240641551281634865583518297030282874472190772894086521144482721001553,\n    16950150798460657717958625567821834550301663161624707787222815936182638968203,\n    ));\n    println(add(\n    5299619240641551281634865583518297030282874472190772894086521144482721001553,\n    16950150798460657717958625567821834550301663161624707787222815936182638968203,\n    0,\n    0,\n    ));\n    println(add(\n    0,\n    0,\n    0,\n    0,\n    ));\n}\n\n\n#[test]\nfn test_add_zero(){\n    println(add_zero(\n    5299619240641551281634865583518297030282874472190772894086521144482721001553,\n    16950150798460657717958625567821834550301663161624707787222815936182638968203,\n    5299619240641551281634865583518297030282874472190772894086521144482721001553,\n    16950150798460657717958625567821834550301663161624707787222815936182638968203,\n    ));\n    println(add_zero(\n    0,\n    0,\n    5299619240641551281634865583518297030282874472190772894086521144482721001553,\n    16950150798460657717958625567821834550301663161624707787222815936182638968203,\n    ));\n    println(add_zero(\n    5299619240641551281634865583518297030282874472190772894086521144482721001553,\n    16950150798460657717958625567821834550301663161624707787222815936182638968203,\n    0,\n    0,\n    ));\n    println(add_zero(\n    0,\n    0,\n    0,\n    0,\n    ));\n}\n\n#[test]\nfn test(){\n    print(priv_to_pub(287325206580568373396753082727527032974277810276511506339905121597618812140));\n}",
      "path": "/Users/mac/projects/passport-zk-circuits-noir/src/jubjub.nr"
    },
    "118": {
      "source": "use crate::not_passports_zk_circuits::{extract_dg1_commitment, extract_pk_identity_hash, passport_hash};\n\npub fn register_identity_light<\n    let DG1_LEN: u32,\n    let DG_HASH_ALGO: u32,\n>(\n    dg1: [u8; DG1_LEN],\n    sk_identity: Field,\n\n) -> (Field, Field, Field){\n\n    \n    let sk_hash = extract_pk_identity_hash(sk_identity);\n    let dg1_commitment = extract_dg1_commitment::<DG1_LEN>(dg1, sk_identity);\n    let dg1_hash_bytes: [u8; DG_HASH_ALGO] = passport_hash::<DG_HASH_ALGO, DG1_LEN>(dg1);\n    let mut dg1_hash: Field = 0;\n\n    let mut hash_diff = 0;\n    if (DG_HASH_ALGO < 31){\n        hash_diff = 31 - DG_HASH_ALGO;\n    }\n\n    let mut current = 1;\n    for i in 0..(31 - hash_diff){\n        dg1_hash += current * dg1_hash_bytes[DG_HASH_ALGO - 1 - i] as Field;\n        current *= 256;\n    }\n\n    (dg1_commitment, dg1_hash, sk_hash)\n}\n\n",
      "path": "/Users/mac/projects/passport-zk-circuits-noir/src/lite.nr"
    },
    "168": {
      "source": "//registerIdentity_3_256_3_3_576_248_NA\npub mod bignum;\npub mod test_main;\npub mod sigver;\npub mod big_curve;\npub mod rsa;\npub mod sha1;\npub mod sha224;\npub mod sha384;\npub mod rsa_pss;\npub mod jubjub;\npub mod smt;\npub mod utils;\npub mod lite;\npub mod not_passports_zk_circuits;\nuse lite::register_identity_light;\n\nfn main(\n\tdg1: [u8; 95],\n\tsk_identity: Field,\n\t) -> pub (Field, Field, Field){\n\tlet tmp = register_identity_light::<\n\t\t95,\n\t\t32\n\t>(\n\tdg1, sk_identity);\n\t(tmp.0, tmp.1, tmp.2)\n}",
      "path": "/Users/mac/projects/passport-zk-circuits-noir/src/main.nr"
    },
    "170": {
      "source": "use std::{field, hash::poseidon::PoseidonHasher};\nuse super::{sigver, sigver::curve_224::ecdsa_ver, sigver::ecdsa::verify_secp521r1_ecdsa, sigver::ecdsa::verify_brainpoolp512r1_ecdsa, sigver::ecdsa::verify_brainpoolp384r1_ecdsa, sigver::ecdsa::verify_secp256r1_ecdsa, big_curve::curves::secp256r1::Secp256r1Fr, sigver::ecdsa::verify_brainpoolp256r1_ecdsa, big_curve::curves::secp256r1::Secp256r1Fq};\nuse crate::bignum::BigNum;\nuse crate::sigver::brainpoolP256r1::params::{BrainpoolP256r1Fq, BrainpoolP256r1Fr};\nuse crate::sigver::brainpoolP384r1::params::{BrainpoolP384r1Fq, BrainpoolP384r1Fr};\nuse crate::sigver::brainpoolP512r1::params::{BrainpoolP512r1Fq, BrainpoolP512r1Fr};\nuse crate::sigver::secp521r1::params::{Secp521r1Fq, Secp521r1Fr};\n\npub fn register_identity<\n    let DG1_LEN: u32,\n    let DG15_LEN: u32,\n    let EC_LEN: u32,\n    let SA_LEN: u32,\n    let N: u32,\n    let EC_FIELD_SIZE: u32,\n    let DG_HASH_ALGO: u32,\n    let HASH_ALGO: u32,\n    let SIG_TYPE: u32,\n    let DG1_SHIFT: u32,\n    let DG15_SHIFT: u32,\n    let EC_SHIFT: u32,\n    let AA_SIG_TYPE: u32,\n    let AA_SHIFT: u32>(\n    dg1: [u8; DG1_LEN],\n    dg15: [u8; DG15_LEN],\n    ec: [u8; EC_LEN],\n    sa: [u8; SA_LEN],\n    pk: [Field; N], \n    reduction_pk: [Field; N],\n    sig: [Field; N],\n    sk_identity: Field,\n    icao_root: Field,\n    inclusion_brances: [Field; 80]\n    ) -> (Field, Field, Field, Field){\n    \n    // 1. Verify flow\n\n    let _ = passport_verification_flow::<\n        DG1_LEN, \n        DG15_LEN, \n        EC_LEN, \n        SA_LEN, \n        DG_HASH_ALGO,\n        HASH_ALGO,\n        DG1_SHIFT,\n        DG15_SHIFT,\n        EC_SHIFT,\n        >(dg1, dg15, ec, sa);\n\n    // 2. Verify signature\n\n    let mut sa_hash: [u8; HASH_ALGO] = passport_hash::<HASH_ALGO, SA_LEN>(sa);\n    if (SIG_TYPE == 24){\n        let tmp_hash: [u8; 28] = passport_hash::<28, SA_LEN>(sa);\n        for i in 0..28{\n            sa_hash[i] = tmp_hash[i];\n        }\n    }\n\n    let _ = verify_signature::<\n            N, SIG_TYPE, HASH_ALGO\n        >(\n            pk, reduction_pk, sig, \n            sa_hash\n        );\n\n    // 3. Verfiy merkle tree inclusion proof\n    let leaf = extract_pk_hash::<N, EC_FIELD_SIZE, SIG_TYPE>(pk);\n    let key  = leaf;\n    let is_verfied = super::smt::smt_verifier::<80>(icao_root, leaf, key, inclusion_brances);\n    assert(is_verfied == 1, \"Merkle tree verification failure\");\n\n    // 4. Get dg15 pubkey hash\n    let dg15_pk_hash = extract_dg15_pk_hash::<DG15_LEN, AA_SHIFT, AA_SIG_TYPE>(dg15);\n    // let dg15_pk_hash = 0;\n\n    // 5. Get dg1Commitment\n    let dg1_commitment = extract_dg1_commitment::<DG1_LEN>(dg1, sk_identity);\n\n    // 6. sk_iden_hash\n    let sk_hash = extract_pk_identity_hash(sk_identity);\n\n    // 7. Get passport hash\n    let passport_hash = extract_passport_hash::<HASH_ALGO>(sa_hash);\n\n    (dg15_pk_hash, passport_hash, dg1_commitment, sk_hash)\n        \n}\n\nfn passport_verification_flow<\n    let DG1_LEN: u32,\n    let DG15_LEN: u32,\n    let EC_LEN: u32,\n    let SA_LEN: u32,\n    let DG_HASH_ALGO: u32,\n    let HASH_ALGO: u32,\n    let DG1_SHIFT: u32,\n    let DG15_SHIFT: u32,\n    let EC_SHIFT: u32>(\n        dg1: [u8; DG1_LEN],\n        dg15: [u8; DG15_LEN],\n        ec: [u8; EC_LEN],\n        sa: [u8; SA_LEN],\n    ){\n    \n    let dg1_hash: [u8; DG_HASH_ALGO] = passport_hash::<DG_HASH_ALGO, DG1_LEN>(dg1);\n\n    \n    let mut dg15_hash: [u8; DG_HASH_ALGO] = [0; DG_HASH_ALGO];\n    if (DG15_LEN != 0){\n        dg15_hash = passport_hash::<DG_HASH_ALGO, DG15_LEN>(dg15);\n    }\n    let ec_hash: [u8; HASH_ALGO] = passport_hash::<HASH_ALGO, EC_LEN>(ec);\n    \n    for i in 0..DG_HASH_ALGO{\n        assert(dg1_hash[i] == ec[i + DG1_SHIFT], \"dg1 mismatch\");\n        if (DG15_LEN != 0){\n            assert(dg15_hash[i] == ec[i + DG15_SHIFT], \"dg15 mismatch\");\n        }\n    }\n    for i in 0..HASH_ALGO{\n        assert(ec_hash[i] == sa[i + EC_SHIFT], \"ec mismatch\");\n    }\n}\n\nfn verify_signature<\n    let N: u32,\n    let SIG_TYPE: u32,\n    let HASH_ALGO: u32>(\n    pk: [Field; N],\n    reduction_pk: [Field; N],\n    sig: [Field; N],\n    hashed: [u8; HASH_ALGO]\n    ){\n    \n    if (SIG_TYPE == 1){\n\n        let mut pk_fixed: [Field; 18] = [0; 18];\n        let mut red_fixed: [Field; 18] = [0; 18];\n        let mut sig_fixed: [Field; 18] = [0; 18];\n\n        for i in 0..18{\n            pk_fixed[i] = pk[i];\n            red_fixed[i] = reduction_pk[i];\n            sig_fixed[i] = sig[i];\n        }\n\n        let _ = super::rsa::verify_rsa::<2048, 18, HASH_ALGO, 65537>(\n            pk_fixed, \n            red_fixed, \n            sig_fixed, \n            hashed\n        );\n    }\n    if (SIG_TYPE == 2){\n        let mut pk_fixed: [Field; 35] = [0; 35];\n        let mut red_fixed: [Field; 35] = [0; 35];\n        let mut sig_fixed: [Field; 35] = [0; 35];\n\n        for i in 0..35{\n            pk_fixed[i] = pk[i];\n            red_fixed[i] = reduction_pk[i];\n            sig_fixed[i] = sig[i];\n        }\n\n        let _ = super::rsa::verify_rsa::<4096, 35, HASH_ALGO, 65537>(\n            pk_fixed, \n            red_fixed, \n            sig_fixed, \n            hashed\n        );\n\n    }\n    if (SIG_TYPE == 3){\n\n        let mut pk_fixed: [Field; 18] = [0; 18];\n        let mut red_fixed: [Field; 18] = [0; 18];\n        let mut sig_fixed: [Field; 18] = [0; 18];\n\n        for i in 0..18{\n            pk_fixed[i] = pk[i];\n            red_fixed[i] = reduction_pk[i];\n            sig_fixed[i] = sig[i];\n        }\n\n\n        let _ = super::rsa::verify_rsa::<2048, 18, HASH_ALGO, 65537>(\n            pk_fixed, \n            red_fixed, \n            sig_fixed, \n            hashed\n        );\n    }\n    if (SIG_TYPE == 4){\n\n        let mut pk_fixed: [Field; 18] = [0; 18];\n        let mut red_fixed: [Field; 18] = [0; 18];\n        let mut sig_fixed: [Field; 18] = [0; 18];\n\n        for i in 0..18{\n            pk_fixed[i] = pk[i];\n            red_fixed[i] = reduction_pk[i];\n            sig_fixed[i] = sig[i];\n        }\n\n\n        let _ = super::rsa::verify_rsa::<2048, 18, HASH_ALGO, 37187>(\n            pk_fixed, \n            red_fixed, \n            sig_fixed, \n            hashed\n        );\n    }\n    if (SIG_TYPE == 5){\n\n        let mut pk_fixed: [Field; 18] = [0; 18];\n        let mut red_fixed: [Field; 18] = [0; 18];\n        let mut sig_fixed: [Field; 18] = [0; 18];\n\n        for i in 0..18{\n            pk_fixed[i] = pk[i];\n            red_fixed[i] = reduction_pk[i];\n            sig_fixed[i] = sig[i];\n        }\n\n\n        let _ = super::rsa::verify_rsa::<2048, 18, HASH_ALGO, 65537>(\n            pk_fixed, \n            red_fixed, \n            sig_fixed, \n            hashed\n        );\n    }\n    if (SIG_TYPE == 6){\n\n        let mut pk_fixed: [Field; 26] = [0; 26];\n        let mut red_fixed: [Field; 26] = [0; 26];\n        let mut sig_fixed: [Field; 26] = [0; 26];\n\n        for i in 0..26{\n            pk_fixed[i] = pk[i];\n            red_fixed[i] = reduction_pk[i];\n            sig_fixed[i] = sig[i];\n        }\n\n\n        let _ = super::rsa::verify_rsa::<3072, 26, HASH_ALGO, 58333>(\n            pk_fixed, \n            red_fixed, \n            sig_fixed, \n            hashed\n        );\n    }\n    if (SIG_TYPE == 7){\n\n        let mut pk_fixed: [Field; 26] = [0; 26];\n        let mut red_fixed: [Field; 26] = [0; 26];\n        let mut sig_fixed: [Field; 26] = [0; 26];\n\n        for i in 0..26{\n            pk_fixed[i] = pk[i];\n            red_fixed[i] = reduction_pk[i];\n            sig_fixed[i] = sig[i];\n        }\n\n\n        let _ = super::rsa::verify_rsa::<3072, 26, HASH_ALGO, 45347>(\n            pk_fixed, \n            red_fixed, \n            sig_fixed, \n            hashed\n        );\n    }\n    if (SIG_TYPE == 8){\n\n        let mut pk_fixed: [Field; 26] = [0; 26];\n        let mut red_fixed: [Field; 26] = [0; 26];\n        let mut sig_fixed: [Field; 26] = [0; 26];\n\n        for i in 0..26{\n            pk_fixed[i] = pk[i];\n            red_fixed[i] = reduction_pk[i];\n            sig_fixed[i] = sig[i];\n        }\n\n\n        let _ = super::rsa::verify_rsa::<3072, 26, HASH_ALGO, 46271>(\n            pk_fixed, \n            red_fixed, \n            sig_fixed, \n            hashed\n        );\n    }\n\n    if (SIG_TYPE == 10){\n        let mut pk_fixed: [Field; 18] = [0; 18];\n        let mut red_fixed: [Field; 18] = [0; 18];\n        let mut sig_fixed: [Field; 18] = [0; 18];\n\n        for i in 0..18{\n            pk_fixed[i] = pk[i];\n            red_fixed[i] = reduction_pk[i];\n            sig_fixed[i] = sig[i];\n        }\n\n        let _ = super::rsa_pss::verify_rsa_pss::<2048, 18, HASH_ALGO, 32, 3>(\n            pk_fixed, \n            red_fixed, \n            sig_fixed, \n            hashed\n        );\n    }\n    if (SIG_TYPE == 11){\n\n        let mut pk_fixed: [Field; 18] = [0; 18];\n        let mut red_fixed: [Field; 18] = [0; 18];\n        let mut sig_fixed: [Field; 18] = [0; 18];\n\n        for i in 0..18{\n            pk_fixed[i] = pk[i];\n            red_fixed[i] = reduction_pk[i];\n            sig_fixed[i] = sig[i];\n        }\n        \n        let _ = super::rsa_pss::verify_rsa_pss::<2048, 18, HASH_ALGO, 32, 65537>(\n            pk_fixed, \n            red_fixed, \n            sig_fixed, \n            hashed\n        );\n    }\n    if (SIG_TYPE == 12){\n\n        let mut pk_fixed: [Field; 18] = [0; 18];\n        let mut red_fixed: [Field; 18] = [0; 18];\n        let mut sig_fixed: [Field; 18] = [0; 18];\n\n        for i in 0..18{\n            pk_fixed[i] = pk[i];\n            red_fixed[i] = reduction_pk[i];\n            sig_fixed[i] = sig[i];\n        }\n\n        let _ = super::rsa_pss::verify_rsa_pss::<2048, 18, HASH_ALGO, 64, 65537>(\n            pk_fixed, \n            red_fixed, \n            sig_fixed, \n            hashed\n        );\n    }\n    if (SIG_TYPE == 13){\n           \n        let mut pk_fixed: [Field; 18] = [0; 18];\n        let mut red_fixed: [Field; 18] = [0; 18];\n        let mut sig_fixed: [Field; 18] = [0; 18];\n\n        for i in 0..18{\n            pk_fixed[i] = pk[i];\n            red_fixed[i] = reduction_pk[i];\n            sig_fixed[i] = sig[i];\n        }\n\n        let _ = super::rsa_pss::verify_rsa_pss::<2048, 18, HASH_ALGO, 48, 65537>(\n            pk_fixed, \n            red_fixed, \n            sig_fixed, \n            hashed\n        );\n    }\n    if (SIG_TYPE == 14){\n        let mut pk_fixed: [Field; 26] = [0; 26];\n        let mut red_fixed: [Field; 26] = [0; 26];\n        let mut sig_fixed: [Field; 26] = [0; 26];\n\n        for i in 0..26{\n            pk_fixed[i] = pk[i];\n            red_fixed[i] = reduction_pk[i];\n            sig_fixed[i] = sig[i];\n        }\n        \n        let _ = super::rsa_pss::verify_rsa_pss::<3072, 26, HASH_ALGO, 32, 65537>(\n            pk_fixed, \n            red_fixed, \n            sig_fixed, \n            hashed\n        );\n    }\n    if (SIG_TYPE == 15){\n\n        let mut pk_fixed: [Field; 18] = [0; 18];\n        let mut red_fixed: [Field; 18] = [0; 18];\n        let mut sig_fixed: [Field; 18] = [0; 18];\n\n        for i in 0..18{\n            pk_fixed[i] = pk[i];\n            red_fixed[i] = reduction_pk[i];\n            sig_fixed[i] = sig[i];\n        }\n\n\n        let _ = super::rsa_pss::verify_rsa_pss::<2048, 18, HASH_ALGO, 64, 65537>(\n            pk_fixed, \n            red_fixed, \n            sig_fixed, \n            hashed\n        );\n    }\n    if (SIG_TYPE == 21){\n        let mut limbs_x: [Field; 3] = [0; 3];\n        let mut limbs_y: [Field; 3] = [0; 3];\n        let mut limbs_r: [Field; 3] = [0; 3];\n        let mut limbs_s: [Field; 3] = [0; 3];\n\n        for i in 0..3{\n            limbs_x[i] = pk[i];\n            limbs_y[i] = pk[i + 3];\n            limbs_r[i] = sig[i];\n            limbs_s[i] = sig[i + 3];   \n        }\n\n        let r: BrainpoolP256r1Fr = BigNum {\n            limbs: limbs_r,\n        };\n\n        let s: BrainpoolP256r1Fr = BigNum {\n            limbs: limbs_s\n        };\n\n        let public_key_x: BrainpoolP256r1Fq = BigNum {\n            limbs: limbs_x\n        };\n\n        let public_key_y: BrainpoolP256r1Fq = BigNum {\n            limbs: limbs_y\n        };\n\n        assert(verify_brainpoolp256r1_ecdsa(public_key_x, public_key_y, hashed, (r, s)));\n    }\n    if (SIG_TYPE == 20){\n        let mut limbs_x: [Field; 3] = [0; 3];\n        let mut limbs_y: [Field; 3] = [0; 3];\n        let mut limbs_r: [Field; 3] = [0; 3];\n        let mut limbs_s: [Field; 3] = [0; 3];\n\n        for i in 0..3{\n            limbs_x[i] = pk[i];\n            limbs_y[i] = pk[i + 3];\n            limbs_r[i] = sig[i];\n            limbs_s[i] = sig[i + 3];   \n        }\n\n        let r: Secp256r1Fr = BigNum {\n            limbs: limbs_r,\n        };\n\n        let s: Secp256r1Fr = BigNum {\n            limbs: limbs_s\n        };\n\n        let public_key_x: Secp256r1Fq = BigNum {\n            limbs: limbs_x\n        };\n\n        let public_key_y: Secp256r1Fq = BigNum {\n            limbs: limbs_y\n        };\n\n        assert(verify_secp256r1_ecdsa(public_key_x, public_key_y, hashed, (r, s)));\n    }\n\n    if (SIG_TYPE == 23){\n        let mut limbs_x: [Field; 2] = [0; 2];\n        let mut limbs_y: [Field; 2] = [0; 2];\n        let mut limbs_r: [Field; 2] = [0; 2];\n        let mut limbs_s: [Field; 2] = [0; 2];\n\n        for i in 0..2{\n            limbs_x[i] = pk[i];\n            limbs_y[i] = pk[i + 2];\n            limbs_r[i] = sig[i];\n            limbs_s[i] = sig[i + 2];   \n        }\n\n        let mut ext_hashed: [u8; 20] = [0;20];\n\n        for i in 0..20{\n            ext_hashed[i] = hashed[i];\n        }\n\n        sigver::curve_192::ecdsa_ver([limbs_r, limbs_s], [limbs_x, limbs_y], ext_hashed);\n    }\n\n    if (SIG_TYPE == 24){\n        let mut limbs_x: [Field; 2] = [0; 2];\n        let mut limbs_y: [Field; 2] = [0; 2];\n        let mut limbs_r: [Field; 2] = [0; 2];\n        let mut limbs_s: [Field; 2] = [0; 2];\n\n        for i in 0..2{\n            limbs_x[i] = pk[i];\n            limbs_y[i] = pk[i + 2];\n            limbs_r[i] = sig[i];\n            limbs_s[i] = sig[i + 2];   \n        }\n\n        let mut ext_hashed: [u8; 28] = [0;28];\n\n        for i in 0..28{\n            ext_hashed[i] = hashed[i];\n        }\n        println([limbs_r, limbs_s]);\n        println([limbs_x, limbs_y]);\n        println(hashed);\n\n        ecdsa_ver([limbs_r, limbs_s], [limbs_x, limbs_y], ext_hashed);\n    }\n\n    if (SIG_TYPE == 25){\n        let mut limbs_x: [Field; 4] = [0; 4];\n        let mut limbs_y: [Field; 4] = [0; 4];\n        let mut limbs_r: [Field; 4] = [0; 4];\n        let mut limbs_s: [Field; 4] = [0; 4];\n\n        for i in 0..4{\n            limbs_x[i] = pk[i];\n            limbs_y[i] = pk[i + 4];\n            limbs_r[i] = sig[i];\n            limbs_s[i] = sig[i + 4];   \n        }\n\n        let r: BrainpoolP384r1Fr = BigNum {\n            limbs: limbs_r,\n        };\n\n        let s: BrainpoolP384r1Fr = BigNum {\n            limbs: limbs_s\n        };\n\n        let public_key_x: BrainpoolP384r1Fq = BigNum {\n            limbs: limbs_x\n        };\n\n        let public_key_y: BrainpoolP384r1Fq = BigNum {\n            limbs: limbs_y\n        };\n        \n        assert(verify_brainpoolp384r1_ecdsa(public_key_x, public_key_y, hashed, (r, s)));\n    }\n\n    if (SIG_TYPE == 26){\n        let mut limbs_x: [Field; 5] = [0; 5];\n        let mut limbs_y: [Field; 5] = [0; 5];\n        let mut limbs_r: [Field; 5] = [0; 5];\n        let mut limbs_s: [Field; 5] = [0; 5];\n\n        for i in 0..5{\n            limbs_x[i] = pk[i];\n            limbs_y[i] = pk[i + 5];\n            limbs_r[i] = sig[i];\n            limbs_s[i] = sig[i + 5];   \n        }\n\n        let r: BrainpoolP512r1Fr = BigNum {\n            limbs: limbs_r,\n        };\n\n        let s: BrainpoolP512r1Fr = BigNum {\n            limbs: limbs_s\n        };\n\n        let public_key_x: BrainpoolP512r1Fq = BigNum {\n            limbs: limbs_x\n        };\n\n        let public_key_y: BrainpoolP512r1Fq = BigNum {\n            limbs: limbs_y\n        };\n        \n        assert(verify_brainpoolp512r1_ecdsa(public_key_x, public_key_y, hashed, (r, s)));\n    }\n\n    if (SIG_TYPE == 27){\n        let mut limbs_x: [Field; 5] = [0; 5];\n        let mut limbs_y: [Field; 5] = [0; 5];\n        let mut limbs_r: [Field; 5] = [0; 5];\n        let mut limbs_s: [Field; 5] = [0; 5];\n\n        for i in 0..5{\n            limbs_x[i] = pk[i];\n            limbs_y[i] = pk[i + 5];\n            limbs_r[i] = sig[i];\n            limbs_s[i] = sig[i + 5];   \n        }\n\n        let r: Secp521r1Fr = BigNum {\n            limbs: limbs_r,\n        };\n\n        let s: Secp521r1Fr = BigNum {\n            limbs: limbs_s\n        };\n\n        let public_key_x: Secp521r1Fq = BigNum {\n            limbs: limbs_x\n        };\n\n        let public_key_y: Secp521r1Fq = BigNum {\n            limbs: limbs_y\n        };\n        \n        assert(verify_secp521r1_ecdsa(public_key_x, public_key_y, hashed, (r, s)));\n    }\n}\n\nfn extract_dg15_pk_hash<\n    let DG15_LEN: u32,\n    let AA_SHIFT: u32,\n    let AA_SIG_TYPE: u32>(\n    dg15: [u8; DG15_LEN]\n    ) -> Field{\n    let mut dg15_pk_hash: Field = 0;\n\n    if (AA_SIG_TYPE != 0){\n        if (AA_SIG_TYPE < 20) { // rsa keys stored\n            let mut dg15_chunks: [Field; 5] = [0; 5];\n            let mut poseidon_hasher: PoseidonHasher = PoseidonHasher::default();\n            \n            for i in 0..5{\n                if (i !=4){\n                    let mut current = 1;\n                    for j in 0..25{ // 200 bit\n                        dg15_chunks[i] += (dg15[AA_SHIFT + (24 - j) + i * 25]) as Field * current;\n                        current *= 256;\n                    }\n                    poseidon_hasher.write(dg15_chunks[i]);\n\n                } else {\n                    let mut current = 1;\n                    for j in 0..28{ // 224 bit\n                        dg15_chunks[i] += (dg15[AA_SHIFT + (27 - j) + i * 25]) as Field * current;\n                        current *= 256;\n                    }\n                    poseidon_hasher.write(dg15_chunks[i]);\n\n                }\n\n                dg15_pk_hash = poseidon_hasher.finish();\n                \n            }\n\n        } else { // ecdsa key stored\n            let mut HASH_SIZE = 31;\n            let mut EC_FIELD_SIZE = 32;\n            if (AA_SIG_TYPE == 22){\n                EC_FIELD_SIZE = 40;\n            }\n            if (AA_SIG_TYPE == 23){\n                EC_FIELD_SIZE = 24;\n                HASH_SIZE = 24;\n            }\n\n            let X_Y_SHIFT = EC_FIELD_SIZE - HASH_SIZE;\n            let mut x = 0;\n            let mut y = 0;\n\n\n            let mut current = 1;\n            for j in 0..HASH_SIZE{ \n                x += (dg15[AA_SHIFT + (HASH_SIZE - 1 - j) + X_Y_SHIFT]) as Field * current;\n                y += (dg15[AA_SHIFT + (HASH_SIZE - 1 - j) + X_Y_SHIFT + EC_FIELD_SIZE]) as Field * current;\n                current *= 256;\n            }\n\n            let mut poseidon_hasher: PoseidonHasher = PoseidonHasher::default();\n            poseidon_hasher.write(x);\n            poseidon_hasher.write(y);\n            dg15_pk_hash = poseidon_hasher.finish();\n        }\n    }\n\n    dg15_pk_hash\n}\n\npub fn extract_dg1_commitment<\n    let DG1_LEN: u32>(\n    dg1: [u8; DG1_LEN], \n    sk_identity: Field) -> Field{\n    let mut poseidon_hasher = PoseidonHasher::default();\n\n    let mut dg1_bits: [u1; DG1_LEN * 8] = [0; DG1_LEN * 8];\n\n    for i in 0..DG1_LEN{\n        let tmp_bits = u8_to_8_u1(dg1[i]);\n        for j in 0..8{\n            dg1_bits[i * 8 + j] = tmp_bits[j];\n        }\n    }\n\n    for i in 0..4{\n        let mut chunk = 0;\n        let mut current = 1;\n        for j in 0..(DG1_LEN * 2){\n            chunk += (dg1_bits[i * 2 * DG1_LEN + j ] as Field) * current;\n            current = current * 2;\n        }\n        poseidon_hasher.write(chunk);\n    }\n\n    let mut poseidon_hasher_2 = PoseidonHasher::default();\n    poseidon_hasher_2.write(sk_identity);\n    poseidon_hasher.write(poseidon_hasher_2.finish());\n\n    poseidon_hasher.finish()\n}\n\npub fn extract_pk_identity_hash<>(\n    sk_identity: Field\n    ) -> Field{\n    let mut hasher = PoseidonHasher::default();\n    let point = super::jubjub::priv_to_pub(sk_identity);\n    hasher.write(point.0);\n    hasher.write(point.1);\n    \n    hasher.finish()\n\n}\n\nfn extract_passport_hash<\n    let HASH_TYPE:u32>(\n    sa_hash: [u8; HASH_TYPE]\n    )->Field{\n\n    let mut poseidon_hasher = PoseidonHasher::default();\n    let mut sa_hash_bits: [u1; 252] = [0; 252];\n\n    if (HASH_TYPE >= 32){\n        for i in 0..32{\n            let tmp_bits = u8_to_8_u1(sa_hash[i]);\n            if (i != 31){\n                for j in 0..8{\n                    sa_hash_bits[i * 8 + j] = tmp_bits[j];\n                }\n            } else {\n                for j in 0..4{ // 248 - 251 bits\n                    sa_hash_bits[i * 8 + j] = tmp_bits[j];\n                }\n            }\n        } \n    } else {\n        for i in 0..HASH_TYPE{\n            let tmp_bits = u8_to_8_u1(sa_hash[i]);\n            \n            for j in 0..8{\n                sa_hash_bits[i * 8 + j] = tmp_bits[j];\n            }\n        } \n    }\n    let mut current = 1;\n    let mut preimage = 0;\n    for i in 0..252{\n        preimage += (sa_hash_bits[i] as Field) * current;\n        current *= 2;\n    }\n\n    poseidon_hasher.write(preimage);\n    poseidon_hasher.finish()\n}\n\nfn extract_pk_hash<\n    let N: u32,\n    let EC_FIELD_SIZE: u32,\n    let SIG_TYPE: u32>(\n        pubkey: [Field; N] \n    ) -> Field{\n    let mut out = 0;\n\n    if (SIG_TYPE < 20){\n        let mut pk_bits: [u1; 960] = [0; 960];\n        for i in 0..8{\n            let bits: [u1; 120] = pubkey[i].to_le_bits();\n            for j in 0..120{\n                pk_bits[i * 120 + j] = bits[j];\n            }\n        }\n\n        let mut chunks: [Field; 15] = [0; 15];\n        for i in 0..15{\n            let mut current = 1;\n            for j in 0..64{\n                chunks[i] += (pk_bits[i * 64 + j] as Field) * current;\n                current *= 2;\n            }\n        }\n        let mut hasher = PoseidonHasher::default();\n        for i in 0..5{\n            hasher.write(chunks[i * 3] * 340282366920938463463374607431768211456 + chunks[i * 3 + 1] * 18446744073709551616 + chunks[i * 3 + 2]);\n        }\n\n        out = hasher.finish();\n\n    } else {\n\n        let mut DIFF = 0;\n        if (EC_FIELD_SIZE > 248){\n            DIFF = EC_FIELD_SIZE - 248;\n        }\n        let mut x_bits: [u1; EC_FIELD_SIZE] = [0; EC_FIELD_SIZE]; \n        let mut y_bits: [u1; EC_FIELD_SIZE] = [0; EC_FIELD_SIZE]; \n\n        for i in 0..((N / 2)){\n            if i != ((N/2) - 1){\n                let bits_x = pubkey[i].to_le_bits::<120>();\n                let bits_y = pubkey[i + (N / 2)].to_le_bits::<120>();\n                for j in 0..120{\n                    x_bits[i * 120 + j] = bits_x[j];\n                    y_bits[i * 120 + j] = bits_y[j];\n                }\n            } else {\n                let bits_x = pubkey[i].to_le_bits::<EC_FIELD_SIZE % 120>();\n                let bits_y = pubkey[i + (N / 2)].to_le_bits::<EC_FIELD_SIZE % 120>();\n                for j in 0..(EC_FIELD_SIZE % 120){\n                    x_bits[i * 120 + j] = bits_x[j];\n                    y_bits[i * 120 + j] = bits_y[j];\n                }\n            }\n        }\n\n        let mut current = 1;\n        let mut res_x = 0;\n        let mut res_y = 0;\n        for i in 0..EC_FIELD_SIZE - DIFF{\n            res_x += (x_bits[i] as Field) * current;\n            res_y += (y_bits[i] as Field) * current;\n            current *= 2;\n        }   \n\n        let mut hasher = PoseidonHasher::default();\n        \n        hasher.write(res_x);\n        hasher.write(res_y);\n        \n        out = hasher.finish();\n\n    }\n    out\n}\n\nfn u8_to_8_u1(x:u8) -> [u1; 8]{\n    let out = __u8_to_8_u1(x);\n    assert((out[0] as u8) * 128 +\n            (out[1] as u8) * 64 + \n            (out[2] as u8) * 32 + \n            (out[3] as u8) * 16 + \n            (out[4] as u8) * 8 +\n            (out[5] as u8) * 4 + \n            (out[6] as u8) * 2 +\n            (out[7] as u8) == x, \"byte to bits conversion\");\n    out\n}\n\nunconstrained fn __u8_to_8_u1(x:u8) -> [u1; 8]{\n    let mut x_clone = x;\n    let mut out: [u1; 8] = [0; 8];\n    for i in 0..8{\n        out[7 - i] = (x_clone % 2) as u1;\n        x_clone = x_clone / 2;\n    }\n    out\n}\n\npub fn passport_hash<let HASH_SIZE: u32, let N: u32>(preimage: [u8; N]) -> [u8; HASH_SIZE]{\n    let mut out: [u8; HASH_SIZE] = [0; HASH_SIZE];\n    if (HASH_SIZE == 20){\n        let hash_result = super::sha1::digest(preimage);\n        for i in 0..20{\n            out[i] = hash_result[i];\n        }\n    }\n    if (HASH_SIZE == 28){\n        let hash_result = super::sha224::digest(preimage);\n        for i in 0..28{\n            out[i] = hash_result[i];\n        }\n    }\n    if (HASH_SIZE == 32){\n        let hash_result = std::sha256::digest(preimage);\n        for i in 0..32{\n            out[i] = hash_result[i];\n        }\n    }\n    if (HASH_SIZE == 48){\n        let hash_result = super::sha384::digest(preimage);\n        for i in 0..48{\n            out[i] = hash_result[i];\n        }\n    }\n    if (HASH_SIZE == 64){\n        let hash_result = std::sha512::digest(preimage);\n        for i in 0..64{\n            out[i] = hash_result[i];\n        }\n    }\n\n    out\n}\n",
      "path": "/Users/mac/projects/passport-zk-circuits-noir/src/not_passports_zk_circuits.nr"
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "__u8_to_8_u1",
    "build_msg_block",
    "attach_len_to_msg_block",
    "directive_to_radix",
    "directive_invert",
    "directive_integer_quotient"
  ]
}